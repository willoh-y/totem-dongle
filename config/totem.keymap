//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define Base        0
#define Nav         1
#define Sym         2
#define Fun         3
#define Game        4
#define Gameplus    5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <300>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <24 27>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <3 6>;
        };

        sticky_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <13 16>;
        };

        caps_lock {
            bindings = <&caps_word>;
            key-positions = <14 15>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <2 7>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
              &kp Q  &kp W    &kp E                       &kp R      &kp T                    &kp Y            &kp U    &kp I          &kp O    &kp P
              &kp A  &lt 2 S  &lt 1 D                     &kp F      &kp G                    &kp H            &kp J    &lt 3 K        &lt 4 L  &kp SEMI
&sk LEFT_GUI  &kp Z  &kp X    &kp C                       &kp V      &kp B                    &kp N            &kp M    &kp COMMA      &kp DOT  &kp SLASH  &lt 5 APOSTROPHE
                              &mt LEFT_ALT DOUBLE_QUOTES  &kp SPACE  &mt LEFT_SHIFT ESCAPE    &mt LCTRL ENTER  &kp TAB  &kp BACKSPACE
            >;
        };

        numbers {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &kp N7  &kp N8  &kp N9  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp N0  &kp N1  &kp N2  &kp N3  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        arrows {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans    &kp LEFT_SHIFT  &trans        &trans     &trans
        &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN        &kp UP        &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &kp LCTRL       &kp LEFT_ALT  &kp DEL    &trans  &trans
                        &trans  &trans  &trans    &trans    &trans          &trans
            >;
        };

        symbols {
            bindings = <
        &kp LS(TILDE)  &kp LS(AMPS)   &kp LS(STAR)   &kp MINUS      &kp PLUS        &trans  &trans  &trans  &trans  &trans
        &kp GRAVE      &kp LS(CARET)  &kp LS(PRCNT)  &kp LS(DLLR)   &kp EQUAL       &trans  &trans  &trans  &trans  &trans
&trans  &kp BSLH       &kp LS(EXCL)   &kp LS(AT)     &kp LS(POUND)  &kp LS(PIPE)    &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans         &trans         &trans          &trans  &trans  &trans
            >;
        };

        braces {
            bindings = <
        &trans        &trans        &kp LS(LT)    &kp LS(GT)    &trans    &trans  &trans  &trans  &trans  &trans
        &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(LBRC)  &kp LS(RBRC)  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &kp LBKT      &kp RBKT      &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };

        fn {
            bindings = <
        &trans  &kp F7  &kp F8  &kp F9  &kp F10    &kp F11    &kp F12   &trans  &trans  &trans
        &trans  &kp F4  &kp F5  &kp F6  &trans     &trans     &trans    &trans  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &trans     &kp LCTRL  &kp LALT  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans     &trans     &trans    &trans
            >;
        };
    };
};
